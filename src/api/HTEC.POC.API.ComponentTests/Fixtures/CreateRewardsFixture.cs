using System;
using System.Threading.Tasks;
using Amido.Stacks.Application.CQRS.ApplicationEvents;
using HTEC.POC.Application.CQRS.Events;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using NSubstitute;
using HTEC.POC.API.Authentication;
using HTEC.POC.API.Models.Requests;
using HTEC.POC.Application.Integration;

namespace HTEC.POC.API.ComponentTests.Fixtures;

public class CreateRewardsFixture : ApiClientFixture
{
    readonly CreateRewardsRequest newRewards;
    IRewardsRepository repository;
    IApplicationEventPublisher applicationEventPublisher;

    public CreateRewardsFixture(CreateRewardsRequest newRewards, IOptions<JwtBearerAuthenticationConfiguration> jwtBearerAuthenticationOptions)
        : base(jwtBearerAuthenticationOptions)
    {
        this.newRewards = newRewards;
    }

    protected override void RegisterDependencies(IServiceCollection collection)
    {
        base.RegisterDependencies(collection);

        // Mocked external dependencies, the setup should
        // come later according to the scenarios
        repository = Substitute.For<IRewardsRepository>();
        applicationEventPublisher = Substitute.For<IApplicationEventPublisher>();

        collection.AddTransient(IoC => repository);
        collection.AddTransient(IoC => applicationEventPublisher);
    }


    /****** GIVEN ******************************************************/

    internal void GivenAValidRewards()
    {
        // Don't need to do anything here assuming the
        // newRewards auto generated by AutoFixture is valid
    }

    internal void GivenAInvalidRewards()
    {
        newRewards.Name = null;
        newRewards.Description = null;
    }


    internal void GivenARewardsDoesNotExist()
    {
        repository.GetByIdAsync(id: Arg.Any<Guid>())
            .Returns((Domain.Rewards)null);
    }


    /****** WHEN ******************************************************/

    internal async Task WhenTheRewardsCreationIsSubmitted()
    {
        await CreateRewards(newRewards);
    }

    /****** THEN ******************************************************/

    internal void ThenGetRewardsByIdIsCalled()
    {
        repository.Received(1).GetByIdAsync(Arg.Any<Guid>());
    }
    internal void ThenTheRewardsIsSubmittedToDatabase()
    {
        repository.Received(1).SaveAsync(Arg.Is<Domain.Rewards>(rewards => rewards.Name == newRewards.Name));
    }

    internal void ThenTheRewardsIsNotSubmittedToDatabase()
    {
        repository.DidNotReceive().SaveAsync(Arg.Any<Domain.Rewards>());
    }

    internal void ThenARewardsCreatedEventIsRaised()
    {
        applicationEventPublisher.Received(1).PublishAsync(Arg.Any<RewardsCreatedEvent>());
    }

    internal void ThenARewardsCreatedEventIsNotRaised()
    {
        applicationEventPublisher.DidNotReceive().PublishAsync(Arg.Any<RewardsCreatedEvent>());
    }
}
