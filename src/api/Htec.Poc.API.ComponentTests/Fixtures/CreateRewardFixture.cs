using System;
using System.Threading.Tasks;
using Amido.Stacks.Application.CQRS.ApplicationEvents;
using Htec.Poc.Application.CQRS.Events;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using NSubstitute;
using Htec.Poc.API.Authentication;
using Htec.Poc.API.Models.Requests;
using Htec.Poc.Application.Integration;

namespace Htec.Poc.API.ComponentTests.Fixtures;

public class CreateRewardFixture : ApiClientFixture
{
    readonly CreateRewardRequest newReward;
    IRewardRepository repository;
    IApplicationEventPublisher applicationEventPublisher;

    public CreateRewardFixture(CreateRewardRequest newReward, IOptions<JwtBearerAuthenticationConfiguration> jwtBearerAuthenticationOptions)
        : base(jwtBearerAuthenticationOptions)
    {
        this.newReward = newReward;
    }

    protected override void RegisterDependencies(IServiceCollection collection)
    {
        base.RegisterDependencies(collection);

        // Mocked external dependencies, the setup should
        // come later according to the scenarios
        repository = Substitute.For<IRewardRepository>();
        applicationEventPublisher = Substitute.For<IApplicationEventPublisher>();

        collection.AddTransient(IoC => repository);
        collection.AddTransient(IoC => applicationEventPublisher);
    }


    /****** GIVEN ******************************************************/

    internal void GivenAValidReward()
    {
        // Don't need to do anything here assuming the
        // newReward auto generated by AutoFixture is valid
    }

    internal void GivenAInvalidReward()
    {
        newReward.Name = null;
        newReward.Description = null;
    }


    internal void GivenARewardDoesNotExist()
    {
        repository.GetByIdAsync(id: Arg.Any<Guid>())
            .Returns((Domain.Reward)null);
    }


    /****** WHEN ******************************************************/

    internal async Task WhenTheRewardCreationIsSubmitted()
    {
        await CreateReward(newReward);
    }

    /****** THEN ******************************************************/

    internal void ThenGetRewardByIdIsCalled()
    {
        repository.Received(1).GetByIdAsync(Arg.Any<Guid>());
    }
    internal void ThenTheRewardIsSubmittedToDatabase()
    {
        repository.Received(1).SaveAsync(Arg.Is<Domain.Reward>(reward => reward.Name == newReward.Name));
    }

    internal void ThenTheRewardIsNotSubmittedToDatabase()
    {
        repository.DidNotReceive().SaveAsync(Arg.Any<Domain.Reward>());
    }

    internal void ThenARewardCreatedEventIsRaised()
    {
        applicationEventPublisher.Received(1).PublishAsync(Arg.Any<RewardCreatedEvent>());
    }

    internal void ThenARewardCreatedEventIsNotRaised()
    {
        applicationEventPublisher.DidNotReceive().PublishAsync(Arg.Any<RewardCreatedEvent>());
    }
}
